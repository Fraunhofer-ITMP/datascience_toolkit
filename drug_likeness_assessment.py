"""Display Page for Drug-Likeness Assessment under KGG"""
import datetime
import uuid

import pandas as pd
import streamlit as st

import kgg_utils
import streamlit_antd_components as sac

st.set_page_config(
    layout="wide",
    page_title="KGG-Drug Likeness Assessment",
    page_icon="üï∏Ô∏è",
    initial_sidebar_state="collapsed",
)

st.markdown(
    "<h1 style='text-align: center; color: #149372;'> Knowledge Graph Generator (KGG)</h1> <br>",
    unsafe_allow_html=True,
)

# ---------------- NAVIGATION ---------------- #
nav = sac.buttons(
    [
        "Description",
        "KG Generator",
        "Drug-likeness assessment",
        "KG Visualizer",
    ],
    index=2,  # highlighting "Drug-likeness assessment" (0=Description, 1=KG Generator, 2=Drug-likeness, 3=Visualizer)
    size="25",
    direction="horizontal",
)

if nav == "Description":
    st.markdown(
        """<meta http-equiv="refresh" content="0; url='https://fraunhofer-itmp-ds-toolkit.serve.scilifelab.se/KGG'" />""",
        unsafe_allow_html=True,
    )
elif nav == "KG Generator":
    st.markdown(
        """<meta http-equiv="refresh" content="0; url='https://kggapp.serve.scilifelab.se/'" />""",
        unsafe_allow_html=True,
    )
elif nav == "Drug-likeness assessment":
    pass
elif nav == "KG Visualizer":
    st.markdown(
        """<meta http-equiv="refresh" content="0; url='http://localhost:8504'" />""",
        unsafe_allow_html=True,
    )

# ---------------- PAGE CONTENT ---------------- #
st.markdown("### Drug-likeness profile and beyond")
st.markdown(
    """ This page allows users to get insights of chemicals and drugs associated with diseases, generated by the KGG."""
)
st.info(
    "**Important:** This process utilizes the CSV file *diseaseAssociatedDrugs* that is generated by KG Generator on the previous tab. If you do not have the file yet, please perform KG Generation first. ",
    icon="‚ÑπÔ∏è",
)

# File uploader
uploaded_file = st.file_uploader(
    "Choose the CSV file named 'diseaseAssociatedDrugs' from a KGG output folder",
    type="csv",
)

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, index_col=0)

    if "drugId" not in df.columns:
        st.error("Looks like you uploaded the wrong file. The DataFrame must contain a column with 'drugId' in its name.")
        st.stop()

    st.write(
        f"Total number of unique drugs is {len(set(df['drugId']))}. Please remember that a same drug can be in different phases of clinical trials."
    )

    calc_filters, unusedDrugs_df = kgg_utils.calculate_filters(df, "drugId")
    filter_cols = ["Lipinski_ro5", "Ghose", "Veber", "REOS", "QED"]
    df_filters = calc_filters[filter_cols]
    calc_figures = kgg_utils.create_charts_with_calc_filters(df_filters)
    pie_figures = kgg_utils.create_pie_chart_from_calc_filters(calc_filters, df_filters)
    formatted_calc_filters = kgg_utils.formulate_calc_filters_df(calc_filters, df_filters)

    zip_data = kgg_utils.create_drug_likeness_zip(calc_figures, pie_figures, formatted_calc_filters)
    st.download_button(
        label="Download Drug Likeness Results",
        data=zip_data,
        file_name=f"{uploaded_file.name.split('.')[0]}_drug_likeness_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}_{uuid.uuid4().hex[:4]}.zip",
        mime="application/zip",
        on_click="ignore",
        help="Click to download the zip file containing above interactive plots and XLSX file.",
    )

elif uploaded_file is None:
    demo_button = st.button("Click to run a demo for Parkinson's disease")
    if demo_button:
        default_data = pd.read_csv("data/kgg_initial_loadfiles/diseaseAssociatedDrugs.csv")
        default_filename = "diseaseAssociatedDrugs.csv"
        st.markdown("Below is a sample data for Parkinson's disease.")

        calc_filters, unusedDrugs_df = kgg_utils.calculate_filters(default_data, "drugId")
        filter_cols = ["Lipinski_ro5", "Ghose", "Veber", "REOS", "QED"]
        df_filters = calc_filters[filter_cols]
        calc_figures = kgg_utils.create_charts_with_calc_filters(df_filters)
        pie_figures = kgg_utils.create_pie_chart_from_calc_filters(calc_filters, df_filters)
        formatted_calc_filters = kgg_utils.formulate_calc_filters_df(calc_filters, df_filters)

# footer with text and green background
current_year = datetime.datetime.now().year
st.markdown(
    f"<footer style='background-color: #149372; padding: 10px; border-radius: 10px;'>"
    f"<p style='color: white; text-align: center;'>Fraunhofer ITMP ¬© {current_year}</p>"
    "<p style='color: white; text-align: center;'>This work has been conducted across several key projects in which ITMP has been actively involved.</p>"
    "</footer>",
    unsafe_allow_html=True,
)
