"""App for Knowledge Graph Generator (KGG)"""

import base64
import datetime
import os
import uuid
import zipfile
import pickle
# from zipfile import ZipFile
from io import BytesIO

import pandas as pd
import streamlit as st
import streamlit_antd_components as sac
from pybel.struct.summary import supersummary as ss
from tabulate import tabulate

import kgg_utils

state = st.session_state

st.set_page_config(
    layout="wide",
    page_title="Knowledge Graph Generator (KGG)",
    page_icon="üï∏Ô∏è",
    initial_sidebar_state="collapsed",
)

st.markdown(
    """
        <style>
            .block-container {
                padding-top: 1.5rem;
                padding-bottom: 1.5rem;
                padding-left: 5rem;
                padding-right: 5rem;
            }
            .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {font-size:1.3rem;}
        </style>
        """,
    unsafe_allow_html=True,
)  # .block-conatiner controls the padding of the page, .stTabs controls the font size of the text in the tabs

st.markdown(
    "<h1 style='text-align: center; color: #149372;'> Knowledge Graph Generator (KGG)</h1> <br>",
    unsafe_allow_html=True,
)

if "active_kgg_tab" not in state:
    state["active_kgg_tab"] = None


kgg_tabs = sac.buttons(
    [
        "Description",
        "KG Generator",
        "Drug-likeness assessment",
        "KG Visualizer",
    ],
    size="25",
    direction="horizontal",
)
# tab1, tab2, tab3, tab4 = st.tabs(
#     ["Description", "KG Generator", "Drug-likeness assessment", "KG Visualizer"]
# )

if kgg_tabs != state["active_kgg_tab"]:
    # Reset the session state when the tab changes
    state.clear()
    state["active_kgg_tab"] = kgg_tabs


if kgg_tabs == "Description":
    # with tab1:
    st.markdown("### What is KGG?")
    st.markdown(
        """**K**nowledge **G**raph **G**enerator (KGG) is a fully automated workflow for creating disease-specific KGs. It is developed for a broad spectrum of researchers and scientists, especially for those who are into pre-clinical drug discovery, understanding disease mechanisms/comorbidity and drug-repurposing. The KGG embeds underlying schema of curated public databases to retrieve relevant knowledge which is regarded as the gold standard for high quality data. The KGG is leveraged on our previous contributions to the BY-COVID project where we developed workflows for identification of bio-active analogs for fragments identified in COVID-NMR studies (Berg, H et al.) and representation of Mpox biology (Karki, R et al.). The programmatic scripts and methods for KGG are written in python (version 3.10) and are available on [GitHub](https://github.com/Fraunhofer-ITMP/kgg).
        """
    )

    st.markdown(
        "Additional information about KGG can be found [here](https://www.infectious-diseases-toolkit.org/showcase/knowledge-graph-generator)"
    )

    kg_worklow = "./images/pages/KGG_workflow_updated.png"
    st.image(
        kg_worklow,
        caption="A schematic representation of the 3 phases of KGG workflow.",
    )

    st.markdown("### Examples and Usecases")

    option = st.selectbox(
        label="Please choose a disease by clicking on the grey area below",
        options=("Alzheimer", "Parkinson", "Depression", "COVID-19"),
        index=0,
    )

    kgg_utils.disease_figures(option)

if kgg_tabs == "Drug-likeness assessment":
    # with tab3:
    st.markdown("### Drug-likeness profile and beyond")
    st.markdown(
        """ This page allows users to get insights of chemicals and drugs associated with diseases, generated by the KGG."""
    )
    st.info(
        "**Important:** This process utilizes the CSV file *diseaseAssociatedDrugs* that is generated by KG Generator on the previous tab. If you do not have the file yet, please perform KG Generation first. ",
        icon="‚ÑπÔ∏è",
    )
    # File uploader
    uploaded_file = st.file_uploader(
        "Choose the CSV file named 'diseaseAssociatedDrugs' from a KGG output folder",
        type="csv",
    )

    if uploaded_file is not None:
        # Read the CSV file
        df = pd.read_csv(uploaded_file, index_col=0)
        # st.write(len(df))

        if "drugId" not in df.columns:
            st.error(
                "Looks like you uploaded the wrong file. The DataFrame must contain a column with 'drugId' in its name."
            )
            st.stop()

        st.write(
            f"Total number of unique drugs is {len(set(df['drugId']))}. Please remember that a same drug can be in different phases of clinical trials."
        )

        calc_filters, unusedDrugs_df = kgg_utils.calculate_filters(df, "drugId")
        filter_cols = ["Lipinski_ro5", "Ghose", "Veber", "REOS", "QED"]
        df_filters = calc_filters[filter_cols]
        calc_figures = kgg_utils.create_charts_with_calc_filters(df_filters)
        pie_figures = kgg_utils.create_pie_chart_from_calc_filters(
            calc_filters, df_filters
        )
        formatted_calc_filters = kgg_utils.formulate_calc_filters_df(
            calc_filters, df_filters
        )

        zip_data = kgg_utils.create_drug_likeness_zip(
            calc_figures, pie_figures, formatted_calc_filters
        )
        st.download_button(
            label="Download Drug Likeness Results",
            data=zip_data,
            file_name=f"{uploaded_file.name.split('.')[0]}_drug_likeness_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}_{uuid.uuid4().hex[:4]}.zip",
            mime="application/zip",
            on_click="ignore",
            help="Click to download the zip file containing above interactive plots and XLSX file.",
        )
    elif uploaded_file is None:
        demo_button = st.button("Click to run a demo for Parkinson's disease")
        if demo_button:
            default_data = pd.read_csv("data/kgg_initial_loadfiles/diseaseAssociatedDrugs.csv")
            default_filename = "diseaseAssociatedDrugs.csv"
            st.markdown("Below is a sample data for Parkinson's disease.")
            calc_filters, unusedDrugs_df = kgg_utils.calculate_filters(default_data, "drugId")
            filter_cols = ["Lipinski_ro5", "Ghose", "Veber", "REOS", "QED"]
            df_filters = calc_filters[filter_cols]
            calc_figures = kgg_utils.create_charts_with_calc_filters(df_filters)
            pie_figures = kgg_utils.create_pie_chart_from_calc_filters(
                calc_filters, df_filters
            )
            formatted_calc_filters = kgg_utils.formulate_calc_filters_df(
                calc_filters, df_filters
            )

            zip_data = kgg_utils.create_drug_likeness_zip(
                calc_figures, pie_figures, formatted_calc_filters
            )
            st.download_button(
                label="Download Drug Likeness Results",
                data=zip_data,
                file_name=f"{default_filename}_drug_likeness_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}_{uuid.uuid4().hex[:4]}.zip",
                mime="application/zip",
                on_click="ignore",
                help="Click to download the zip file containing above interactive plots and XLSX file.",
            )



#        st.write(
#            "Some drugs may not have SMILES representation because their type is either antibody, protein or unknown. The unparsed drugs can be downloaded here."
#        )

if kgg_tabs == "KG Visualizer":
    # with tab4:
    st.markdown("### KG Visualizer")
    st.markdown(
        """ This page allows users to get insights of a PyBEL Knowledge Graph...
        """
    )
    st.info(
        "**Important:** Please only upload the pickle file of a graph. Other types of files (CSV,XLSX) are not supported.",
        icon="‚ÑπÔ∏è",
    )

    # File uploader
    uploaded_file = st.file_uploader(
        "Please upload your pickle file.",
        type="pkl",
        
    )

    if uploaded_file is not None:
        query_graph = kgg_utils.load_pickle_file(uploaded_file=uploaded_file)
        if query_graph is None:
            st.error(
                "Uploaded file is either corrupt or the file format is wrong. Please upload the right file."
            )
            st.stop()
        kgg_utils.query_graph_info(query_graph)
        st.markdown("### Display of your graph:")
        graph_subset_html = kgg_utils.display_interactive_belgraph(query_graph)
        kgg_utils.download_interactive_belgraph(graph_subset_html)
    elif uploaded_file is None:
        query_graph = pickle.load(
            open(
                "data/kgg_initial_loadfiles/drugRepurposing.pkl",
                "rb",
            )
        )
        st.markdown("Below is a sample graph for Parkinson's disease.")
        kgg_utils.query_graph_info(query_graph)
        st.markdown("### Display of the initial graph:")
        graph_subset_html = kgg_utils.display_interactive_belgraph(query_graph)
        kgg_utils.download_interactive_belgraph(graph_subset_html)

if kgg_tabs == "KG Generator":
    # with tab2:
    st.markdown(
        "üëãüèª Welcome to the KG Generator tool! Interested in building your own disease graph, lets get started..."
    )

    st.markdown("The workflow is divided into 3 main steps:")
    st.markdown(
        "1. **Disease search and Chemical filters** - Search for a disease and select the clinical trial phase of chemicals."
    )
    st.markdown(
        "2. **Generating the graph** - Generate the base knowledge graph with protein filter"
    )
    st.markdown(
        "3. **Finalizing the graph** - Add additional information to the graph and save the files."
    )

    st.header(
        "Disease search and Chemical filters",
        anchor="disease-search",
        divider="grey",
    )

    def disease_input_and_search():
        # Resetting the key session variables if disease changes
        if "previous_disease" in state and state.user_disease != state.previous_disease:
            keys_to_clear = [
                "disease_df",
                "drugs_df",
                "dis2prot_df",
                "dis2snp_df",
                "graph",
            ]
            for key in keys_to_clear:
                if key in state:
                    del state[key]
            state.previous_disease = state.user_disease

        # Initializing the session state
        if "user_disease" not in state:
            state["user_disease"] = ""

        # Adding the button area with key so that it automatically synchronizes with the session state
        disease_name = st.text_input(
            "Enter the disease you are interested in generating a graph.",
            placeholder="e.g. AIDS",
            key="user_disease",
        )

        if "disease_name" in state and state["user_disease"] != state["disease_name"]:
            for key in list(state.keys()):
                if key != "user_disease":
                    del state[key]
            state.clear()
            state["user_disease"] = disease_name

        if disease_name.strip():
            df = kgg_utils.searchDisease(disease_name)

            if df.empty:
                st.warning("No results found for the disease. Please try again.")
            else:
                with st.expander("Disease search results"):
                    st.dataframe(df, hide_index=True)

            return df
        else:
            st.info("Please enter a disease name to search.")
            return pd.DataFrame()

    def disease_input_component():
        # Initializing the "user_disease" variable in session state
        if "user_disease" not in state:
            state["user_disease"] = "AIDS"

        # Adding the button with key binding (This key will automatically synchronize with the session state)
        disease_name = st.text_input(
            "Enter the disease you are interested in generating a graph. Please hit the **Search for disease** button to search.",
            placeholder="e.g. AIDS",
            key="user_disease",
        )
        if disease_name == "":
            st.warning("Please enter a disease name.")
            st.stop()

    def disease_search_component():
        # Initializing disease_df in session state
        if "disease_df" not in state:
            state["disease_df"] = pd.DataFrame()
        # Adding the button with key binding (This key will automatically synchronize with the session state)
        search_button = st.button(
            "Search for disease",
            key="search_button",
        )
        if search_button:
            state["disease_df"] = kgg_utils.searchDisease(state["user_disease"])
            if state["disease_df"].empty:
                st.write("No results found for the disease. Please try again.")
                st.stop()
            else:
                with st.expander("Disease search results"):
                    st.dataframe(state["disease_df"], hide_index=True)

        return state["disease_df"]

    #    disease_input_component()
    #    disease_df = disease_search_component()
    disease_df = disease_input_and_search()

    col1, col2 = st.columns(2)

    with col1:
        st.markdown(
            "**Please select the disease of interest from the table above by entering the identifier value.** \n Each disease has a unique id, which fetches associated proteins using OpenTargets API. Double click twice on the id of interest to select, copy, and paste the id into the text box."
        )
        if disease_df.empty:
            st.stop()
        else:
            #            st.write(f"Disease ID at this point: {disease_df.iloc[0]['id']}")
            if "disease_id" not in state:
                state["disease_id"] = disease_df.iloc[0]["id"]

            disease_id = st.text_input(
                "Please enter the identifier for disease of interest.",
                value=disease_df.iloc[0]["id"],
                key="disease_id",
            )

    with col2:
        st.markdown(
            """**Please enter the clinical trial phase of chemicals which should be used by the workflow.** \n Use a number between 1 (early phase) and 4 (FDA approved). Keep in mind, lower input values increase the number of identified chemicals and running time."""
        )

        if "ct_phase" not in state:
            state["ct_phase"] = 3
        ct_phase = st.number_input(
            label="Select your clinical trial phase",
            min_value=1,
            max_value=4,
            value=state["ct_phase"],
            key="ct_phase",
        )

    st.markdown(
        ":red[Selected disease:] "
        + str(state["user_disease"])
        + ":red[ with ID:] "
        + str(state["disease_id"])
        + ":red[ and clinical trial phase:] "
        + str(state["ct_phase"])
    )
    state["viral_prot"] = kgg_utils.GetViralProteins(state["user_disease"])

    # if "viral_prot" not in st.session_state:
    #     st.session_state["viral_prot"] = viral_prot
    # elif not st.session_state["viral_prot"] == viral_prot:
    #     # elif viral_prot != st.session_state["viral_prot"]:
    #     st.session_state["viral_prot"] = viral_prot

    #    st.write(state)

    st.header("Generating the graph", anchor="generate-graph", divider="grey")

    dis_name = state["user_disease"].lower().replace(" ", "_").replace("-", "_")
    kg_name = f"kgg_{dis_name}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
    if "kg_name" not in state:
        state["kg_name"] = kg_name
    elif kg_name != state["kg_name"]:
        state["kg_name"] = kg_name

    if "button_clicked" not in state:
        state["button_clicked"] = False

    def callback():
        state["button_clicked"] = True

    if st.button("Generate Base Knowledge Graph", on_click=callback) or state.get(
        "button_clicked", False
    ):
        # st.write(state)
        #        st.write(state["user_disease"])
        #        st.write(state["disease_id"])
        state["drugs_df"] = pd.DataFrame()
        state["dis2prot_df"] = pd.DataFrame()
        state["dis2snp_df"] = pd.DataFrame()
        state["drugs_df"], state["dis2prot_df"], state["dis2snp_df"] = (
            kgg_utils.createInitialKG(
                _ct_phase=state["ct_phase"],
            )
        )

        #        state["dis2prot_df"] = dis2prot_df
        #        state["dis2snp_df"] = dis2snp_df
        #        if not state["dis2prot_df"].empty:
        #            st.write("Current protein data preview:")
        #            st.dataframe(state["dis2prot_df"].head())
        #            st.write(
        #                f"Current disease in session state: {st.session_state.get('user_disease')}"
        #            )
        kgg_utils.GetDiseaseAssociatedProteinsPlot(state["dis2prot_df"])

        def threshold_input_component():
            score_input = st.text_input(
                "Enter threshold score (recommended > 0.3):",
                placeholder="e.g., 0.3",
                key="protein_score_input",
            )

            if not score_input.strip():
                st.info("Please enter a threshold score and hit Enter.")
                st.stop()

            try:
                score = float(score_input)
                if not (0.0 <= score <= 1.0):
                    st.warning("Please enter a score between 0.0 and 1.0.")
                    st.stop()
            except ValueError:
                st.warning("Please enter a valid numeric value.")
                st.stop()

            return score

        def apply_threshold_and_update(score):
            if "filtered_df" not in state:
                state["filtered_df"] = pd.DataFrame()
            state["filtered_df"] = state["dis2prot_df"][
                state["dis2prot_df"]["Score"] >= score
            ]

            st.warning(
                f"""‚ÑπÔ∏è Filter of protein score (> {score}) has been applied. 
                This reduced the number of proteins from {len(state["dis2prot_df"])} to {len(state["filtered_df"])}."""
            )

            if "graph" not in state:
                state["graph"] = None
            state["graph"] = kgg_utils.finalizeKG(
                state["filtered_df"], session_inputs=state
            )

            st.header("Graph summary", anchor="graph-summary", divider="grey")
            if "rv_base" not in state:
                state["rv_base"] = ""
            if "rv_stats" not in state:
                state["rv_stats"] = ""
            state["rv_base"], state["rv_stats"] = kgg_utils.get_graph_summary(
                state["graph"]
            )

            with st.container():
                st.markdown(
                    f"""\n<h3>Metadata</h3>
                    {tabulate(state["rv_base"], tablefmt="html")}
                    <h3>Statistics</h3>
                    {tabulate(state["rv_stats"], tablefmt="html")}
                    <h3>Nodes</h3>
                    {ss.functions_str(state["graph"], examples=True, add_count=False, tablefmt="html")}
                    <h3>Namespaces</h3>
                    {ss.namespaces_str(state["graph"], examples=True, add_count=False, tablefmt="html")}
                    <h3>Edges</h3>
                    {ss.edges_str(state["graph"], examples=True, add_count=False, tablefmt="html")}""",
                    unsafe_allow_html=True,
                )

        state["protein_score"] = threshold_input_component()
        apply_threshold_and_update(state["protein_score"])

        kgg_utils.disease_figures(
            disease_name=state["user_disease"],
            graph=state["graph"],
        )

    #        state["button_clicked"] = False

    if "graph" in state and state["graph"] is not None:
        if "zip_data" not in state:
            state["zip_data"] = ""
        if "folder_name" not in state:
            state["folder_name"] = ""
        state["zip_data"] = kgg_utils.create_zip()
        state["folder_name"] = (
            f"{state['user_disease']}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{uuid.uuid4().hex[:4]}.zip"
        )
        #                st.balloons()

        st.download_button(
            label="Download all files",
            data=state["zip_data"],
            file_name=state["folder_name"],
            mime="application/zip",
            on_click="ignore",
            help="Click to download the zip file containing all graphs and CSVs. This will also download the CSV file *diseaseAssociatedDrugs.csv* that you can utilize for Drug-likeness assessment on the next tab.",
        )

        if st.button(
            "Start Over",
            help="This button usually takes a while. Please have patience.",
        ):
            #            kgg_utils.createInitialKG.clear()
            state.clear()
            state["button_clicked"] = False
            st.rerun()

    else:
        st.warning("KG will be generated once all inputs are given.")


# footer with text and green background
current_year = datetime.datetime.now().year
st.markdown(
    f"<footer style='background-color: #149372; padding: 10px; border-radius: 10px;'>"
    f"<p style='color: white; text-align: center;'>Fraunhofer ITMP ¬© {current_year}</p>"
    "<p style='color: white; text-align: center;'>This work has been conducted across several key projects in which ITMP has been actively involved.</p>"
    "</footer>",
    unsafe_allow_html=True,
)
